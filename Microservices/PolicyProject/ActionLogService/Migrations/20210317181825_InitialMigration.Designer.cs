// <auto-generated />
using System;
using ActionLogService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ActionLogService.Migrations
{
    [DbContext(typeof(ActionLogDbContext))]
    [Migration("20210317181825_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ActionLogService.Models.ActionLog", b =>
                {
                    b.Property<Guid>("ActionLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActionLogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceSerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EventActionId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ActionLogId");

                    b.HasIndex("EventActionId");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("ActionLogService.Models.EventAction", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("EventId");

                    b.ToTable("EventActions");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            EventName = "Создание документа"
                        },
                        new
                        {
                            EventId = 2,
                            EventName = "Проведение документа"
                        },
                        new
                        {
                            EventId = 3,
                            EventName = "Сохранение документа"
                        },
                        new
                        {
                            EventId = 4,
                            EventName = "Удаление документа"
                        },
                        new
                        {
                            EventId = 5,
                            EventName = "Открытие документа"
                        },
                        new
                        {
                            EventId = 6,
                            EventName = "Добавление пользователя"
                        },
                        new
                        {
                            EventId = 7,
                            EventName = "Удаление пользователя"
                        },
                        new
                        {
                            EventId = 8,
                            EventName = "Изменение пользователя"
                        },
                        new
                        {
                            EventId = 9,
                            EventName = "Добавление логина"
                        },
                        new
                        {
                            EventId = 10,
                            EventName = "Изменение логина"
                        },
                        new
                        {
                            EventId = 11,
                            EventName = "Удаление логина"
                        },
                        new
                        {
                            EventId = 12,
                            EventName = "Добавление устройства"
                        },
                        new
                        {
                            EventId = 13,
                            EventName = "Изменение устройства"
                        },
                        new
                        {
                            EventId = 14,
                            EventName = "Удаление устройства"
                        },
                        new
                        {
                            EventId = 15,
                            EventName = "Выгрузка сертификата"
                        },
                        new
                        {
                            EventId = 16,
                            EventName = "Добавлеине события"
                        },
                        new
                        {
                            EventId = 17,
                            EventName = "Изменение события"
                        },
                        new
                        {
                            EventId = 18,
                            EventName = "Удаление события"
                        },
                        new
                        {
                            EventId = 19,
                            EventName = "Добавлеине группы"
                        },
                        new
                        {
                            EventId = 20,
                            EventName = "Изменение группы"
                        },
                        new
                        {
                            EventId = 21,
                            EventName = "Удаление группы"
                        },
                        new
                        {
                            EventId = 22,
                            EventName = "Вход в систему"
                        },
                        new
                        {
                            EventId = 23,
                            EventName = "Добавление политики"
                        },
                        new
                        {
                            EventId = 24,
                            EventName = "Изменение политики"
                        },
                        new
                        {
                            EventId = 25,
                            EventName = "Удаление политики"
                        },
                        new
                        {
                            EventId = 26,
                            EventName = "Привязка устройства логину"
                        },
                        new
                        {
                            EventId = 27,
                            EventName = "Отвязка устройства от логина"
                        },
                        new
                        {
                            EventId = 28,
                            EventName = "Привязка политики логину"
                        },
                        new
                        {
                            EventId = 29,
                            EventName = "Отвязка политики от логина"
                        },
                        new
                        {
                            EventId = 30,
                            EventName = "Выход из системы"
                        },
                        new
                        {
                            EventId = 31,
                            EventName = "Ошибка"
                        },
                        new
                        {
                            EventId = 32,
                            EventName = "Удаление логов"
                        });
                });

            modelBuilder.Entity("ActionLogService.Models.ActionLog", b =>
                {
                    b.HasOne("ActionLogService.Models.EventAction", "Action")
                        .WithMany()
                        .HasForeignKey("EventActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");
                });
#pragma warning restore 612, 618
        }
    }
}
