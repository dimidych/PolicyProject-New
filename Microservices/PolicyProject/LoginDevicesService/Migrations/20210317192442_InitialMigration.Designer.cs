// <auto-generated />
using System;
using LoginDevicesService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LoginDevicesService.Migrations
{
    [DbContext(typeof(LoginDevicesDbContext))]
    [Migration("20210317192442_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DeviceService.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceMacAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("DevicePlatformId")
                        .HasColumnType("smallint");

                    b.Property<string>("DeviceSerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("LoginDevicesService.Models.LoginDevices", b =>
                {
                    b.Property<Guid>("LoginDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LoginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("NeedUpdateDevice")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("LoginDeviceId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("LoginId");

                    b.ToTable("LoginDevices");
                });

            modelBuilder.Entity("LoginService.Models.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogIn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginId");

                    b.ToTable("Logins");

                    b.HasData(
                        new
                        {
                            LoginId = new Guid("fa3585fd-b259-4bb5-a37e-ce917fd13154"),
                            Certificate = "BwIAAACkAABSU0EyAAQAAAEAAQBFC1xx6QxReIJCpx9XNDgEoxsIhnZq2ibDCHKV8xS+UeHQHspO4dcXNALbiDx2BKou685I9aFjVav8Q+65Yo9IKgwS0e0j0hB+hA1DAGGe8/a6svrHTemiM7uToPVD8NNJO8l+a+uH/UZnb5O63xJnVfCUnvXQwM0205taBdWx5Y/m1xVd+E7QkzqChqniKMX2nkTBIInCfRLJillsUWTs6OwDgiRFNTKpfrgo8Z6P/psrnClXzV9LSEWO5mBGbPjrOqHmeacQzHULvQZbZTZqo/D9A35tw+zuMb6q5Lukwh2kwgQa+SDe3TJoNpbVMSwUsUSUjThbUl9ql9jiUrPshe3p+EXtAT+hO2p+rJ1WCEs5x6hsK9AP87BBGJmfyO4q3sN5TBOPQ2XLa6UXNHNxOGS+IFKPOu+alkdoxXZHPmE7xvuBBhtJVHXm228pj2mkL22OtheA333w0CGPBOF1BWZ0EPB3+cYG6agYKiSOSlu4CkiwvNR4iEBrzT/n3QCDJ61rW+ALiOQhRHMhO0Vs+YPwy1Iztl15wwaVQFEtQVx3+MjszHzpm+XrNMTuswcUHTpMqjfurYDgaza4n4iuHTge0jnk3+XQQgfYI6EP+Ag+2/X5rPnsqtNtxsNZGLQMcROdzGOPUknI8fZL9rY0gK+GH/FRAsY4C0qBTab7n1Nb1VcPmaMmo78hGLAc9kK2Yxi4JXv/FmYUGAdWCm3gRkTZhtGUdDqIiQTbybl/p++g5kHextX1kJDSWSw8Nr8=",
                            GroupId = new Guid("b96c8d96-94d5-40df-bdc8-852b10199a4a"),
                            LogIn = "Admin",
                            Password = "827ccb0eea8a706c4c34a16891f84e7b",
                            UserId = new Guid("a1972983-5389-49c5-a64d-bc4a65861a53")
                        });
                });

            modelBuilder.Entity("LoginDevicesService.Models.LoginDevices", b =>
                {
                    b.HasOne("DeviceService.Device", "LdDevice")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoginService.Models.Login", "LdLogin")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LdDevice");

                    b.Navigation("LdLogin");
                });
#pragma warning restore 612, 618
        }
    }
}
